{"version":3,"file":"static/js/323.80ea5499.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.js","components/App/App.styled.jsx","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state);\n\n  const filterNormalized = filter.toLowerCase().trim();\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterNormalized)\n  );\n};\n\n/**\n *\n */\n// export const selectContacts = state => state.contacts.items;\n// export const selectIsLoading = state => state.contacts.isLoading;\n// export const selectError = state => state.contacts.error;\n// export const selectFilter = state => state.filter;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormContact = styled(Form)`\n  margin-bottom: 30px;\n  padding: 10px;\n  border: 2px solid #000000;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 18px;\n`;\n\nexport const Input = styled(Field)`\n  margin-top: 10px;\n  padding: 5px;\n  width: 200px;\n  color: #0000ff;\n  border: 1px solid #9ba2a8;\n  font-size: 16px;\n\n  :hover,\n  :focus {\n    box-shadow: 0px 1px 5px 2px #9ba2a8;\n  }\n`;\n\nexport const ErrorText = styled.p`\n  font-size: 14px;\n  color: red;\n`;\n\nexport const AddBtn = styled.button`\n  padding: 5px 20px;\n  display: inline;\n  align-items: center;\n  text-align: center;\n  font-family: inherit;\n  font-size: 16px;\n  border: 2px solid #9ba2a8;\n  border-radius: 5px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 250ms ease, box-shadow 250ms ease;\n\n  :hover,\n  :focus {\n    background-color: #b2b2ed;\n    box-shadow: 0px 4px 10px 4px #9ba2a8;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\n// import { nanoid } from 'nanoid';\nimport toast from 'react-hot-toast';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport 'yup-phone';\n\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport {\n  FormContact,\n  FormLabel,\n  Input,\n  ErrorText,\n  AddBtn,\n} from './ContactForm.styled';\n\nlet schema = yup.object().shape({\n  name: yup.string().min(3).required(),\n  number: yup.string().phone('UA').required(),\n});\n\nconst FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const onAddContact = data => {\n    const newContact = {\n      // id: nanoid(3),\n      name: data.name,\n      number: data.number,\n    };\n\n    const dataNameNormalized = newContact.name.toLowerCase();\n    const anyName = contacts.some(\n      ({ name }) => dataNameNormalized === name.toLowerCase()\n    );\n    const anyNumber = contacts.some(\n      ({ number }) => newContact.number === number\n    );\n    const findNumber = contacts.find(\n      ({ number }) => newContact.number === number\n    );\n    const notifyErrorName = () =>\n      toast.error(`\"${newContact.name}\" is already in contacts`);\n    const notifyErrorNumber = () =>\n      toast.error(\n        `Number \"${newContact.number}\" is already saved as \"${findNumber.name}\"`\n      );\n    const notifySucces = () =>\n      toast.success(`\"${newContact.name}\" successfully added!`);\n\n    if (anyName) {\n      notifyErrorName();\n      return;\n    }\n    if (anyNumber) {\n      notifyErrorNumber();\n      return;\n    }\n    notifySucces();\n    dispatch(addContact(newContact));\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    onAddContact(values);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormContact>\n        <FormLabel htmlFor=\"name\">\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\"Name\"\n            required\n          />\n          <FormError name=\"name\" />\n        </FormLabel>\n        <FormLabel htmlFor=\"number\">\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\"Number\"\n            required\n          />\n          <FormError name=\"number\" />\n        </FormLabel>\n        <AddBtn type=\"submit\">Add contact</AddBtn>\n      </FormContact>\n    </Formik>\n  );\n};\n\n/**\n *\n *\n */\n// import { useSelector, useDispatch } from 'react-redux';\n// import { nanoid } from 'nanoid';\n// import toast from 'react-hot-toast';\n// import { Formik, ErrorMessage } from 'formik';\n// import * as yup from 'yup';\n// import 'yup-phone';\n\n// import { selectContacts } from 'redux/selectors';\n// import { addContact } from 'redux/operations';\n// import {\n//   FormContact,\n//   FormLabel,\n//   Input,\n//   ErrorText,\n//   AddBtn,\n// } from './ContactForm.styled';\n\n// let schema = yup.object().shape({\n//   name: yup.string().min(3).required(),\n//   number: yup.string().phone('UA').required(),\n// });\n\n// const FormError = ({ name }) => {\n//   return (\n//     <ErrorMessage\n//       name={name}\n//       render={message => <ErrorText>{message}</ErrorText>}\n//     />\n//   );\n// };\n\n// const initialValues = {\n//   name: '',\n//   number: '',\n// };\n\n// export const ContactForm = () => {\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(selectContacts);\n\n//   const onAddContact = data => {\n//     const newContact = {\n//       id: nanoid(3),\n//       name: data.name,\n//       phone: data.number,\n//     };\n\n//     const dataNameNormalized = newContact.name.toLowerCase();\n//     const anyName = contacts.some(\n//       ({ name }) => dataNameNormalized === name.toLowerCase()\n//     );\n//     const anyNumber = contacts.some(({ phone }) => newContact.phone === phone);\n//     const findNumber = contacts.find(({ phone }) => newContact.phone === phone);\n//     const notifyErrorName = () =>\n//       toast.error(`\"${newContact.name}\" is already in contacts`);\n//     const notifyErrorNumber = () =>\n//       toast.error(\n//         `Number \"${newContact.phone}\" is already saved as \"${findNumber.name}\"`\n//       );\n//     const notifySucces = () =>\n//       toast.success(`\"${newContact.name}\" successfully added!`);\n\n//     if (anyName) {\n//       notifyErrorName();\n//       return;\n//     }\n//     if (anyNumber) {\n//       notifyErrorNumber();\n//       return;\n//     }\n//     notifySucces();\n//     dispatch(addContact(newContact));\n//   };\n\n//   const handleSubmit = (values, { resetForm }) => {\n//     onAddContact(values);\n//     resetForm();\n//   };\n\n//   return (\n//     <Formik\n//       initialValues={initialValues}\n//       validationSchema={schema}\n//       onSubmit={handleSubmit}\n//     >\n//       <FormContact>\n//         <FormLabel htmlFor=\"name\">\n//           Name\n//           <Input\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             placeholder=\"Name\"\n//             required\n//           />\n//           <FormError name=\"name\" />\n//         </FormLabel>\n//         <FormLabel htmlFor=\"number\">\n//           Number\n//           <Input\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             placeholder=\"Number\"\n//             required\n//           />\n//           <FormError name=\"number\" />\n//         </FormLabel>\n//         <AddBtn type=\"submit\">Add contact</AddBtn>\n//       </FormContact>\n//     </Formik>\n//   );\n// };\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\n  margin-bottom: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  gap: 5px;\n  font-size: 18px;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 5px;\n  color: #1f6451;\n  border: 1px solid #9ba2a8;\n\n  font-size: 16px;\n\n  :hover,\n  :focus {\n    box-shadow: 0px 1px 5px 2px #9ba2a8;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nimport { FilterLabel, FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const changeFilter = evt => {\n    dispatch(setFilter(evt.currentTarget.value));\n  };\n\n  return (\n    <FilterLabel htmlFor=\"filter\">\n      Find contacts by name\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={changeFilter}\n        placeholder=\"Put the name for search\"\n      />\n    </FilterLabel>\n  );\n};\n\n/**\n *\n *\n */\n// import { useSelector, useDispatch } from 'react-redux';\n// import { setFilter } from 'redux/filterSlice';\n\n// import { selectFilter } from 'redux/selectors';\n\n// import { FilterLabel, FilterInput } from './Filter.styled';\n\n// export const Filter = () => {\n//   const filter = useSelector(selectFilter);\n//   const dispatch = useDispatch();\n\n//   const changeFilter = evt => {\n//     dispatch(setFilter(evt.currentTarget.value));\n//   };\n\n//   return (\n//     <FilterLabel htmlFor=\"filter\">\n//       Find contacts by name\n//       <FilterInput\n//         type=\"text\"\n//         name=\"filter\"\n//         value={filter}\n//         onChange={changeFilter}\n//         placeholder=\"Put the name for search\"\n//       />\n//     </FilterLabel>\n//   );\n// };\n","import styled from 'styled-components';\n\nexport const Item = styled.div`\n  padding: 5px;\n  display: flex;\n  align-items: center;\n  border: 1px solid #9ba2a8;\n  font-size: 18px;\n  font-weight: 500;\n\n  :not(:last-child) {\n    border-bottom: none;\n  }\n`;\n\nexport const Number = styled.span`\n  margin-left: auto;\n`;\n\nexport const DeleteBtn = styled.button`\n  margin-left: 40px;\n  padding: 0px 20px;\n  display: inline;\n  align-items: center;\n  text-align: center;\n  font-family: inherit;\n  font-size: 14px;\n  border: 2px solid #9ba2a8;\n  border-radius: 5px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 250ms ease, box-shadow 250ms ease;\n\n  :hover,\n  :focus {\n    background-color: #e26565;\n    box-shadow: 0px 4px 10px 4px #9ba2a8;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { PropTypes } from 'prop-types';\n\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport { Item, Number, DeleteBtn } from './ContactItem.styled';\n\nexport const ContactItem = ({ contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <Item>\n      <span>{name}: </span>\n      <Number>{number}</Number>\n      <DeleteBtn type=\"button\" onClick={handleDelete}>\n        Delete\n      </DeleteBtn>\n    </Item>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n\n/**\n *\n */\n// import { useDispatch } from 'react-redux';\n// import { PropTypes } from 'prop-types';\n\n// import { deleteContact } from 'redux/operations';\n\n// import { Item, Number, DeleteBtn } from './ContactItem.styled';\n\n// export const ContactItem = ({ contact }) => {\n//   const { id, name, phone } = contact;\n//   const dispatch = useDispatch();\n//   const handleDelete = () => dispatch(deleteContact(id));\n\n//   return (\n//     <Item>\n//       <span>{name}: </span>\n//       <Number>{phone}</Number>\n//       <DeleteBtn type=\"button\" onClick={handleDelete}>\n//         Delete\n//       </DeleteBtn>\n//     </Item>\n//   );\n// };\n\n// ContactItem.propTypes = {\n//   contact: PropTypes.shape({\n//     id: PropTypes.string.isRequired,\n//     name: PropTypes.string.isRequired,\n//     phone: PropTypes.string.isRequired,\n//   }),\n// };\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin: 0 auto;\n  padding: 50px;\n  width: 450px;\n  color: #010101;\n  background-color: #f0ffff;\n  box-shadow: 0px 4px 10px 4px #9ba2a8;\n`;\n\nexport const Title = styled.h1`\n  margin-bottom: 20px;\n  font-size: 36px;\n`;\n\nexport const SubTitle = styled.h2`\n  margin-bottom: 15px;\n  font-size: 28px;\n`;\n\nexport const FilterText = styled.p`\n  color: #330101;\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const ContactText = styled.p`\n  color: #330101;\n  font-size: 20px;\n  font-weight: 500;\n`;\n","import { useSelector } from 'react-redux';\n\nimport {\n  // selectContacts,\n  selectFilter,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { ContactItem } from 'components/ContactItem';\nimport { FilterText } from 'components/App/App.styled';\n\nexport const ContactList = () => {\n  // const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return visibleContacts.length ? (\n    <>\n      <ul>\n        {visibleContacts\n          .sort((a, b) => a.name.localeCompare(b.name))\n          .map(contact => (\n            <li key={contact.id}>\n              <ContactItem contact={contact} />\n            </li>\n          ))}\n      </ul>\n    </>\n  ) : (\n    <>\n      <FilterText>No matches found for \"{filter}\"!</FilterText>\n    </>\n  );\n};\n\n/**\n *\n */\n// import { useSelector } from 'react-redux';\n\n// import { selectContacts, selectFilter } from 'redux/selectors';\n// import { ContactItem } from 'components/ContactItem';\n// import { FilterText } from 'components/App/App.styled';\n\n// const getVisibleContacts = (contacts, filter) => {\n//   const filterNormalized = filter.toLowerCase().trim();\n\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(filterNormalized)\n//   );\n// };\n\n// export const ContactList = () => {\n//   const contacts = useSelector(selectContacts);\n//   const filter = useSelector(selectFilter);\n\n//   const visibleContacts = getVisibleContacts(contacts, filter);\n\n//   return visibleContacts.length ? (\n//     <>\n//       <ul>\n//         {visibleContacts\n//           .sort((a, b) => a.name.localeCompare(b.name))\n//           .map(contact => (\n//             <li key={contact.id}>\n//               <ContactItem contact={contact} />\n//             </li>\n//           ))}\n//       </ul>\n//     </>\n//   ) : (\n//     <>\n//       <FilterText>No matches found for \"{filter}\"!</FilterText>\n//     </>\n//   );\n// };\n","import { Helmet } from 'react-helmet';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\nimport { ContactList } from 'components/ContactList';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectVisibleContacts","filterNormalized","toLowerCase","trim","contact","name","includes","FormContact","styled","Form","FormLabel","Input","Field","ErrorText","AddBtn","schema","yup","shape","min","required","number","phone","FormError","render","message","initialValues","ContactForm","dispatch","useDispatch","useSelector","validationSchema","onSubmit","values","resetForm","data","newContact","dataNameNormalized","anyName","some","anyNumber","findNumber","find","toast","addContact","onAddContact","htmlFor","type","pattern","title","placeholder","FilterLabel","FilterInput","Filter","value","onChange","evt","setFilter","currentTarget","Item","Number","DeleteBtn","ContactItem","id","onClick","deleteContact","FilterText","ContactList","visibleContacts","length","sort","a","b","localeCompare","map","useEffect","fetchContacts","Helmet"],"sourceRoot":""}